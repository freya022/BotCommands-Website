name: Deploy wiki to Pages

on:
  push:
    paths:
      - 'mkdocs.yml'
      - 'requirements.txt'
      - 'pom.xml'
      - 'docs/**'
      - 'config-template/**'
      - 'src/**'
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false # Don't set to true

jobs:
  wiki:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fetch gh-pages
        run: git fetch origin gh-pages --depth=1
      - name: Configure Git user
        run: |
          git config user.name GitHub Actions
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          cache: 'pip'
      - name: Install Python dependencies
        run: pip install -r requirements.txt
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install jsdom
        run: npm install jsdom
      - name: Get BC version and alias
        uses: actions/github-script@v7
        id: get-bc-version
        with:
          result-encoding: 'json'
          script: |
            const fs = require("node:fs")
            const jsdom = require("jsdom")

            const mavenMetadata = await fetch("https://repo1.maven.org/maven2/io/github/freya022/BotCommands/maven-metadata.xml").then(response => response.text())
            const mavenMetadataDoc = new jsdom.JSDOM(mavenMetadata, { contentType: "text/xml"})
            const latestBcVersion = mavenMetadataDoc.window.document.querySelector("metadata > versioning > latest")

            const pom = fs.readFileSync("pom.xml", "utf8")
            const pomDoc = new jsdom.JSDOM(pom, { contentType: "text/xml"})
            const dependencies = pomDoc.window.document.querySelectorAll("project > dependencies > dependency")

            for (dependency of dependencies) {
            	const artifactId = dependency.querySelector("artifactId").textContent
            	if (artifactId == "BotCommands") {
            		const bcVersion = dependency.querySelector("version").textContent
            		const alias = bcVersion.at(0) + ".X"
            		const isLatest = bcVersion == latestBcVersion

            		return {
            			bcVersion: bcVersion,
            			alias: alias,
            			isLatest: isLatest
            		}
            	}
            }

            throw new Error("Could not find used BC version")
      - name: Generate wiki
        run: mike deploy ${{ fromJSON(steps.get-bc-version.outputs.result).bcVersion }} ${{ fromJSON(steps.get-bc-version.outputs.result).alias }} --update-aliases
      - name: Update latest alias
        if: ${{ fromJSON(steps.get-bc-version.outputs.result).alias }}
        run: mike set-default ${{ fromJSON(steps.get-bc-version.outputs.result).alias }} --push
